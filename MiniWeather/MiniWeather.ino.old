#include <ArduinoJson.h>
#include <ESP8266WebServer.h>
#include <stdio.h>

#include "WifiCredentials.h" //Make sure that you have put your credentials in the 'WifiCredentials.h.template' file and renamed the file to 'WifiCredentials.h'
#include "WebUi.h"

#include <Wire.h>
#include "cactus_io_BME280_I2C.h"

#define HTTP_REST_PORT 80
#define MAX_WIFI_INIT_RETRY 50
#define ONE_WIRE_BUS D3
#define WIFI_RETRY_DELAY 500


ESP8266WebServer http_rest_server(HTTP_REST_PORT);
BME280_I2C bme(0x76);  // I2C using address 0x76


char TemperatureStr[6];
char HumidityStr[6];
char PressureStr[6];
float Temperature, Humidity, Pressure;
unsigned int SecureCounter;


int init_wifi() {
    int retries = 0;

    Serial.println("Connecting to WiFi AP..........");

    WiFi.mode(WIFI_STA);
    WiFi.begin(wifi_ssid, wifi_passwd);
    // check the status of WiFi connection to be WL_CONNECTED
    while ((WiFi.status() != WL_CONNECTED) && (retries < MAX_WIFI_INIT_RETRY)) {
        retries++;
        delay(WIFI_RETRY_DELAY);
        Serial.print("#");
    }
    return WiFi.status(); // return the WiFi connection status
}

void readTemperature() {
    Serial.println("Reading");
    digitalWrite(LED_BUILTIN, LOW);  // Turn the LED on
    
    bme.readSensor();

    Temperature = bme.getTemperature_C();
    Humidity = bme.getHumidity();
    Pressure = bme.getPressure_MB();



    Serial.print(Pressure); Serial.print(" mBar\t\t");    // Pressure in millibars
    Serial.print(Humidity); Serial.print(" %RH\t\t\t\t");
    Serial.print(Temperature); Serial.print(" °C\t\t\t");

    digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off
}

void getApi() {
    readTemperature();
    StaticJsonBuffer<200> jsonBuffer;
    JsonObject& jsonObj = jsonBuffer.createObject();
    char JSONmessageBuffer[200];

    jsonObj["secure_counter"] = SecureCounter;
    jsonObj["symbol"] = "°C";
    jsonObj["temperature"] = TemperatureStr;
    jsonObj["unit"] = "Celsius";
    jsonObj.prettyPrintTo(JSONmessageBuffer, sizeof(JSONmessageBuffer));
    http_rest_server.send(200, "application/json", JSONmessageBuffer);
}

void getIndex() {
    readTemperature();
    String html = web_ui_html;
    html.replace("%T%", String(TemperatureStr));
    html.replace("%SC%", String(SecureCounter));
    http_rest_server.send(200, "text/html", html);
}

void config_rest_server_routing() {
    http_rest_server.on("/", HTTP_GET, getIndex);
    http_rest_server.on("/api", HTTP_GET, getApi);
}


void setup() {
    Serial.begin(9600);
    Serial.println("BME280 Luftdruck, Luftfeuchtigkeit, Temperatur Sensor | cactus.io");
    Serial.println("-----------------------------------------------------------------");
    Serial.println("");

    if (!bme.begin()) {
        Serial.println("Es konnte kein BME280 Sensor gefunden werden!");
        Serial.println("Bitte überprüfen Sie die Verkabelung!");
        while (1);
    }

    bme.setTempCal(-1);

    Serial.println("Luftdruck\tLuftfeuchtigkeit\t\tTemperatur(Celsius)\t\tTemperatur(Fahrenheit)");
}

void loop() {
    //bme.readSensor();

    //Serial.print(bme.getPressure_MB()); Serial.print("\t\t");    // Pressure in millibars
    //Serial.print(bme.getHumidity()); Serial.print("%\t\t\t\t");
    //Serial.print(bme.getTemperature_C()); Serial.print(" °C\t\t\t");
    //Serial.print(bme.getTemperature_F()); Serial.println(" °F");

    //delay(2000);


    http_rest_server.handleClient();
}